call plug#begin('~/.vim/plugged')

Plug 'Yggdroot/indentLine'
Plug 'w0rp/ale'
Plug 'tpope/vim-surround'

"Language
Plug 'lervag/vimtex'
Plug 'davidhalter/jedi-vim'
Plug 'darfink/vim-plist'

"Theme
Plug 'vim-airline/vim-airline'
Plug 'lifepillar/vim-solarized8'
Plug 'arcticicestudio/nord-vim', { 'branch': 'develop' }

call plug#end()

"Global
set encoding=utf8
set bs=2

"UI
set background=dark
let g:nord_italic = 1
let g:nord_italic_comments = 1
let g:nord_underline = 1
colorscheme nord
let &t_8f="\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b="\<Esc>[48;2;%lu;%lu;%lum"
set termguicolors

set showmatch
set cursorline
set ruler 
set number
set relativenumber
set showcmd

"Search
set hlsearch
set ignorecase
set smartcase

"Spaceing and Indent
set tabstop=4
set smarttab
set expandtab
set shiftwidth=4
set softtabstop=4

set autoindent
set smartindent

"Touchpad
set mouse=a

"Files
set autoread

set nobackup
set nowb
set noswapfile

"Create dir
function s:MkNonExDir(file, buf)
    if empty(getbufvar(a:buf, '&buftype')) && a:file!~#'\v^\w+\:\/'
        let dir=fnamemodify(a:file, ':h')
        if !isdirectory(dir)
            call mkdir(dir, 'p')
        endif
    endif
endfunction
augroup BWCCreateDir
    autocmd!
    autocmd BufWritePre * :call s:MkNonExDir(expand('<afile>'), +expand('<abuf>'))
augroup END

"Miscellaneous
set belloff=all

"jedi
let g:jedi#completions_command = "<C-N>" 
let g:indentLine_color_term = 15

"ale
let g:ale_linters = {'python':['flake8'], 'latex':['chktex']}
let g:ale_linters_explicit = 1
let g:ale_statusline_format = ['⨉ %d', '⚠ %d', '⬥ ok']
let g:ale_sign_column_always = 1

"Python
autocmd BufNewFile *.py exec ":call SetTitle()"
func SetTitle() 
    if &filetype == "python"
        call setline(1,"#!/usr/bin/env python3")
        call setline(2,"# -* - coding: UTF-8 -* -")
    endif
endfunc

"Nord
let g:nord_cursor_line_number_background = 1
let g:nord_uniform_status_lines = 1

"vimtex
let g:tex_flavor = 'latex'

"vim-plist
function! s:ConvertBinaryPlist()
  silent! execute '%d'
  call plist#Read(1)
  call plist#ReadPost()
  set fileencoding=utf-8

  autocmd! BufWriteCmd,FileWriteCmd <buffer>
  autocmd BufWriteCmd,FileWriteCmd <buffer>
        \ call plist#Write()
endfunction
autocmd BufRead *
      \ if getline(1) =~# '^bplist' |
      \   call s:ConvertBinaryPlist() |
      \ endif
autocmd BufNewFile *.plist
      \ if !get(b:, 'plist_original_format') |
      \   let b:plist_original_format = 'xml' |
      \ endif
